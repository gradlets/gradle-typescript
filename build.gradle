/*
 * (c) Copyright 2021 Felipe Orozco, Robert Kruszewski. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'idea'
    id 'com.markelliot.versions' version '0.6.0'
    id 'com.palantir.baseline' version '4.161.0'
    id 'com.palantir.consistent-versions' version '2.11.0'
    id 'com.palantir.git-version' version '0.15.0'
    id 'com.palantir.java-format' version '2.26.0'
    id 'nebula.maven-publish' version '18.4.0' apply false
    id 'net.ltgt.errorprone' version '2.0.2' apply false
    id 'org.inferred.processors' version '3.7.0' apply false
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.6'
    id 'com.gradle.plugin-publish' version '1.0.0'
}

apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'

version System.env.CIRCLE_TAG ?: gitVersion()

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.palantir.java-format'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'org.inferred.processors'

    version rootProject.version
    group 'com.gradlets.gradle.typescript'

    tasks.withType(Jar) {
        it.getManifest().getAttributes().put 'Implementation-Version', project.version
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://dl.bintray.com/marshallpierce/maven/' }
    }

    java {
        sourceCompatibility JavaVersion.VERSION_11
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Werror']
        options.errorprone.disable 'SafeLoggingExceptionMessageFormat'
    }

    tasks.withType(Test) {
        testLogging {
            events 'failed', 'skipped', 'passed'
        }
    }

    tasks.check.dependsOn javadoc, checkUnusedDependencies
}
